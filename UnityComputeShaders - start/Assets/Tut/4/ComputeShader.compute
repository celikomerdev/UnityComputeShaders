

RWTexture2D<float4> Result;
int texResolution;
float4 rect;



int inCircle(int2 pt,int radius)
{
	return (length(pt)<radius)? 1:0;
}

float glow(int2 pt,float radius)
{
	return (radius-length(pt))/radius;
}

int inRect(int2 pt,int radius)
{
	int weightX = length(pt.x)<radius? 1:0;
	int weightY = length(pt.y)<radius? 1:0;
	return weightX*weightY;
}


int inSquare(int2 pt,int4 rectInput)
{
	if(pt.x<rectInput.x) return 0;
	else if(pt.y<rectInput.y) return 0;
	else if(pt.x>rectInput.z) return 0;
	else if(pt.y>rectInput.w) return 0;
	else return 1;
}



#pragma kernel CSMain
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Result[id.xy] = float4(id.x/256.0,0,0,0);
}


#pragma kernel SplitScreen
[numthreads(8,8,1)]
void SplitScreen (uint3 id : SV_DispatchThreadID)
{
	int halfRes = texResolution>>1;
	Result[id.xy] = float4(step(halfRes,id.x),step(halfRes,id.y),0,0);
}

#pragma kernel Circle
[numthreads(8,8,1)]
void Circle (uint3 id : SV_DispatchThreadID)
{
	int center = texResolution>>1;
	int radius = texResolution>>2;
	Result[id.xy] = float4(glow(id.xy-center,radius),0,0,0);
}


#pragma kernel Square
[numthreads(8,8,1)]
void Square (uint3 id : SV_DispatchThreadID)
{
	Result[id.xy] = float4(inSquare(id.xy,rect),0,0,0);
}